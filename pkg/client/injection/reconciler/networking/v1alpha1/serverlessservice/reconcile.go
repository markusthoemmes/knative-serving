/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by injection-gen. DO NOT EDIT.

package serverlessservice

import (
	"context"
	"fmt"

	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1alpha1 "knative.dev/serving/pkg/apis/networking/v1alpha1"
	client "knative.dev/serving/pkg/client/injection/client"
	serverlessservice "knative.dev/serving/pkg/client/injection/informers/networking/v1alpha1/serverlessservice"
)

func Reconcile(ctx context.Context, desired *v1alpha1.ServerlessService) (*v1alpha1.ServerlessService, error) {
	client := client.Get(ctx)
	lister := serverlessservice.Get(ctx).Lister()

	actual, err := lister.ServerlessServices(desired.Namespace).Get(desired.Name)
	if errors.IsNotFound(err) {
		created, err := client.NetworkingV1alpha1().ServerlessServices(desired.Namespace).Create(desired)
		if err != nil {
			return nil, fmt.Errorf("error creating ServerlessService: %w", err)
		}
		return created, nil
	} else if err != nil {
		return nil, fmt.Errorf("error fetching ServerlessService: %w", err)
	} else if *v1.GetControllerOf(actual) != *v1.GetControllerOf(desired) {
		return nil, fmt.Errorf("not owned error (should be static to be checkable)")
	} else {
		if !equality.Semantic.DeepEqual(desired.Spec, actual.Spec) {
			want := actual.DeepCopy()
			want.Spec = desired.Spec
			updated, err := client.NetworkingV1alpha1().ServerlessServices(want.Namespace).Update(want)
			if err != nil {
				return nil, fmt.Errorf("error updating ServerlessService: %w", err)
			}
			return updated, nil
		}
		return actual, nil
	}
}
