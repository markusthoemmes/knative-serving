/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/autoscaler/metrics/ingestor.proto

package metrics

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WireStatMessages struct {
	Messages []*WireStatMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *WireStatMessages) Reset()         { *m = WireStatMessages{} }
func (m *WireStatMessages) String() string { return proto.CompactTextString(m) }
func (*WireStatMessages) ProtoMessage()    {}
func (*WireStatMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0bc3cc69d61452, []int{0}
}
func (m *WireStatMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WireStatMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WireStatMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WireStatMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WireStatMessages.Merge(m, src)
}
func (m *WireStatMessages) XXX_Size() int {
	return m.Size()
}
func (m *WireStatMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_WireStatMessages.DiscardUnknown(m)
}

var xxx_messageInfo_WireStatMessages proto.InternalMessageInfo

func (m *WireStatMessages) GetMessages() []*WireStatMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// WireStatMessage is a copy of the StatMessage Golang type, exploding the fields of
// `types.NamespacedName` to make it compatible with protobufs.
type WireStatMessage struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Stat      *Stat  `protobuf:"bytes,3,opt,name=stat,proto3" json:"stat,omitempty"`
}

func (m *WireStatMessage) Reset()         { *m = WireStatMessage{} }
func (m *WireStatMessage) String() string { return proto.CompactTextString(m) }
func (*WireStatMessage) ProtoMessage()    {}
func (*WireStatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0bc3cc69d61452, []int{1}
}
func (m *WireStatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WireStatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WireStatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WireStatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WireStatMessage.Merge(m, src)
}
func (m *WireStatMessage) XXX_Size() int {
	return m.Size()
}
func (m *WireStatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_WireStatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_WireStatMessage proto.InternalMessageInfo

func (m *WireStatMessage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WireStatMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WireStatMessage) GetStat() *Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

// Response is an empty message.
type Response struct {
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0bc3cc69d61452, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WireStatMessages)(nil), "metrics.WireStatMessages")
	proto.RegisterType((*WireStatMessage)(nil), "metrics.WireStatMessage")
	proto.RegisterType((*Response)(nil), "metrics.Response")
}

func init() {
	proto.RegisterFile("pkg/autoscaler/metrics/ingestor.proto", fileDescriptor_7c0bc3cc69d61452)
}

var fileDescriptor_7c0bc3cc69d61452 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xbd, 0x4e, 0xfb, 0x30,
	0x14, 0xc5, 0xe3, 0x7f, 0xab, 0xfe, 0xdb, 0x5b, 0x01, 0xc5, 0x93, 0xa9, 0x90, 0xd5, 0x46, 0x42,
	0xca, 0x94, 0x48, 0x81, 0x05, 0x89, 0x09, 0x31, 0xc0, 0x90, 0x25, 0x1d, 0x98, 0x4d, 0x74, 0x89,
	0x22, 0xc8, 0x87, 0x7c, 0xcd, 0xc0, 0x5b, 0xf0, 0x58, 0x6c, 0x74, 0x64, 0x44, 0xc9, 0x8b, 0xa0,
	0x7c, 0x90, 0x4a, 0x15, 0x19, 0xd8, 0x8e, 0xef, 0x39, 0xbf, 0xe3, 0x2b, 0x1b, 0xce, 0x8a, 0xa7,
	0xd8, 0x53, 0x2f, 0x26, 0xa7, 0x48, 0x3d, 0xa3, 0xf6, 0x52, 0x34, 0x3a, 0x89, 0xc8, 0x4b, 0xb2,
	0x18, 0xc9, 0xe4, 0xda, 0x2d, 0x74, 0x6e, 0x72, 0xfe, 0xbf, 0x9b, 0x2f, 0xd7, 0x03, 0x79, 0x32,
	0xca, 0xb4, 0x59, 0xfb, 0x16, 0x16, 0xf7, 0x89, 0xc6, 0x8d, 0x51, 0x26, 0x40, 0x22, 0x15, 0x23,
	0xf1, 0x0b, 0x98, 0xa6, 0x9d, 0x16, 0x6c, 0x35, 0x72, 0xe6, 0xbe, 0x70, 0x3b, 0xd4, 0xdd, 0x0b,
	0x87, 0x7d, 0xd2, 0x7e, 0x84, 0xa3, 0x3d, 0x93, 0x9f, 0xc2, 0x2c, 0x53, 0x29, 0x52, 0xa1, 0x22,
	0x14, 0x6c, 0xc5, 0x9c, 0x59, 0xb8, 0x1b, 0x70, 0x0e, 0xe3, 0xfa, 0x20, 0xfe, 0x35, 0x46, 0xa3,
	0xf9, 0x1a, 0xc6, 0xf5, 0x72, 0x62, 0xb4, 0x62, 0xce, 0xdc, 0x3f, 0xe8, 0xaf, 0xad, 0x5b, 0xc3,
	0xc6, 0xb2, 0x01, 0xa6, 0x21, 0x52, 0x91, 0x67, 0x84, 0xfe, 0x07, 0x83, 0xc3, 0xa0, 0x89, 0xdc,
	0x75, 0x4f, 0xc0, 0x2f, 0x61, 0xd2, 0x6a, 0x3e, 0xb8, 0xf4, 0xf2, 0xb8, 0x77, 0x7e, 0x9a, 0x6c,
	0xcb, 0x61, 0xfc, 0x0a, 0xa0, 0x45, 0x03, 0x95, 0xbd, 0xf2, 0x93, 0x21, 0x9c, 0x7e, 0xe5, 0xf9,
	0x0d, 0x2c, 0x76, 0xf4, 0xc6, 0x68, 0x54, 0xe9, 0x5f, 0x3b, 0x1c, 0x76, 0x2d, 0xde, 0x4b, 0xc9,
	0xb6, 0xa5, 0x64, 0x5f, 0xa5, 0x64, 0x6f, 0x95, 0xb4, 0xb6, 0x95, 0xb4, 0x3e, 0x2b, 0x69, 0x3d,
	0x4c, 0x9a, 0x0f, 0x3b, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xe3, 0xf2, 0x4f, 0x05, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricIngestorClient is the client API for MetricIngestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricIngestorClient interface {
	Ingest(ctx context.Context, opts ...grpc.CallOption) (MetricIngestor_IngestClient, error)
	IngestMany(ctx context.Context, in *WireStatMessages, opts ...grpc.CallOption) (*Response, error)
	IngestManyStream(ctx context.Context, opts ...grpc.CallOption) (MetricIngestor_IngestManyStreamClient, error)
}

type metricIngestorClient struct {
	cc *grpc.ClientConn
}

func NewMetricIngestorClient(cc *grpc.ClientConn) MetricIngestorClient {
	return &metricIngestorClient{cc}
}

func (c *metricIngestorClient) Ingest(ctx context.Context, opts ...grpc.CallOption) (MetricIngestor_IngestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetricIngestor_serviceDesc.Streams[0], "/metrics.MetricIngestor/Ingest", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricIngestorIngestClient{stream}
	return x, nil
}

type MetricIngestor_IngestClient interface {
	Send(*WireStatMessage) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type metricIngestorIngestClient struct {
	grpc.ClientStream
}

func (x *metricIngestorIngestClient) Send(m *WireStatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricIngestorIngestClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricIngestorClient) IngestMany(ctx context.Context, in *WireStatMessages, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/metrics.MetricIngestor/IngestMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricIngestorClient) IngestManyStream(ctx context.Context, opts ...grpc.CallOption) (MetricIngestor_IngestManyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetricIngestor_serviceDesc.Streams[1], "/metrics.MetricIngestor/IngestManyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricIngestorIngestManyStreamClient{stream}
	return x, nil
}

type MetricIngestor_IngestManyStreamClient interface {
	Send(*WireStatMessages) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type metricIngestorIngestManyStreamClient struct {
	grpc.ClientStream
}

func (x *metricIngestorIngestManyStreamClient) Send(m *WireStatMessages) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricIngestorIngestManyStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricIngestorServer is the server API for MetricIngestor service.
type MetricIngestorServer interface {
	Ingest(MetricIngestor_IngestServer) error
	IngestMany(context.Context, *WireStatMessages) (*Response, error)
	IngestManyStream(MetricIngestor_IngestManyStreamServer) error
}

// UnimplementedMetricIngestorServer can be embedded to have forward compatible implementations.
type UnimplementedMetricIngestorServer struct {
}

func (*UnimplementedMetricIngestorServer) Ingest(srv MetricIngestor_IngestServer) error {
	return status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (*UnimplementedMetricIngestorServer) IngestMany(ctx context.Context, req *WireStatMessages) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestMany not implemented")
}
func (*UnimplementedMetricIngestorServer) IngestManyStream(srv MetricIngestor_IngestManyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method IngestManyStream not implemented")
}

func RegisterMetricIngestorServer(s *grpc.Server, srv MetricIngestorServer) {
	s.RegisterService(&_MetricIngestor_serviceDesc, srv)
}

func _MetricIngestor_Ingest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricIngestorServer).Ingest(&metricIngestorIngestServer{stream})
}

type MetricIngestor_IngestServer interface {
	SendAndClose(*Response) error
	Recv() (*WireStatMessage, error)
	grpc.ServerStream
}

type metricIngestorIngestServer struct {
	grpc.ServerStream
}

func (x *metricIngestorIngestServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricIngestorIngestServer) Recv() (*WireStatMessage, error) {
	m := new(WireStatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricIngestor_IngestMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireStatMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricIngestorServer).IngestMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.MetricIngestor/IngestMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricIngestorServer).IngestMany(ctx, req.(*WireStatMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricIngestor_IngestManyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricIngestorServer).IngestManyStream(&metricIngestorIngestManyStreamServer{stream})
}

type MetricIngestor_IngestManyStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*WireStatMessages, error)
	grpc.ServerStream
}

type metricIngestorIngestManyStreamServer struct {
	grpc.ServerStream
}

func (x *metricIngestorIngestManyStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricIngestorIngestManyStreamServer) Recv() (*WireStatMessages, error) {
	m := new(WireStatMessages)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MetricIngestor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.MetricIngestor",
	HandlerType: (*MetricIngestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestMany",
			Handler:    _MetricIngestor_IngestMany_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ingest",
			Handler:       _MetricIngestor_Ingest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "IngestManyStream",
			Handler:       _MetricIngestor_IngestManyStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/autoscaler/metrics/ingestor.proto",
}

func (m *WireStatMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WireStatMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WireStatMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIngestor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WireStatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WireStatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WireStatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIngestor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIngestor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintIngestor(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintIngestor(dAtA []byte, offset int, v uint64) int {
	offset -= sovIngestor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WireStatMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovIngestor(uint64(l))
		}
	}
	return n
}

func (m *WireStatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIngestor(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIngestor(uint64(l))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovIngestor(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovIngestor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIngestor(x uint64) (n int) {
	return sovIngestor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WireStatMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIngestor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WireStatMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WireStatMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIngestor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIngestor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIngestor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &WireStatMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIngestor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIngestor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIngestor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WireStatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIngestor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WireStatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WireStatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIngestor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIngestor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIngestor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIngestor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIngestor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIngestor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIngestor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIngestor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIngestor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &Stat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIngestor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIngestor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIngestor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIngestor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIngestor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIngestor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIngestor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIngestor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIngestor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIngestor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIngestor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIngestor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIngestor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIngestor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIngestor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIngestor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIngestor = fmt.Errorf("proto: unexpected end of group")
)
